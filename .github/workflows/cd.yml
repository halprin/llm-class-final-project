name: CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:

      - uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_FOR_DEPLOY }}
          aws-region: us-east-1

      - uses: hashicorp/setup-terraform@v3

      - uses: actions/checkout@v5

      - name: Terraform Init
        working-directory: ./iac/
        run: terraform init

      - name: Terraform Apply
        working-directory: ./iac/
        run: terraform apply -auto-approve  -var 'pinecone_api_key=${{ secrets.PINECONE_API_KEY }}'

      - name: Get Terraform Outputs
        working-directory: ./iac/
        id: terraform-output
        run: |
          ECR_URL=$(terraform output -raw ecr_repository_url)
          ECS_CLUSTER=$(terraform output -raw ecs_cluster_name)
          ECS_SERVICE=$(terraform output -raw ecs_service_name)
          echo "ecr_url=$ECR_URL" >> $GITHUB_OUTPUT
          echo "ecs_cluster=$ECS_CLUSTER" >> $GITHUB_OUTPUT
          echo "ecs_service=$ECS_SERVICE" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ steps.terraform-output.outputs.ecr_url }}

      - name: Build Docker Image
        run: docker build -t ${{ steps.terraform-output.outputs.ecr_url }}:latest .

      - name: Push Docker Image to ECR
        run: docker push ${{ steps.terraform-output.outputs.ecr_url }}:latest

      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster ${{ steps.terraform-output.outputs.ecs_cluster }} \
            --service ${{ steps.terraform-output.outputs.ecs_service }} \
            --force-new-deployment \
            --region us-east-1
